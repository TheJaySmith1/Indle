import { useState, useMemo } from 'react';
import { motion } from 'motion/react';
import { useGameState } from './hooks/useGameState';
import { StatsHeader } from './components/StatsHeader';
import { CompanyCard } from './components/CompanyCard';
import { CreateCompanyModal } from './components/CreateCompanyModal';
import { RealCompaniesModal } from './components/RealCompaniesModal';
import { SaveManager } from './components/SaveManager';
import { LoanManager } from './components/LoanManager';
import { BoxOfficeManager } from './components/BoxOfficeManager';
import { AutoBoxOfficeSettings } from './components/AutoBoxOfficeSettings';
import { Button } from './components/ui/button';
import { Badge } from './components/ui/badge';
import { 
  Plus, 
  Briefcase, 
  Building, 
  Star, 
  TrendingUp, 
  CreditCard, 
  Film,
  AlertCircle,
  CheckCircle,
  Settings,
  Zap,
  Play,
  Pause
} from 'lucide-react';

export default function App() {
  const {
    gameState,
    industries,
    loanOffers,
    saveStatus,
    currentSaveSlot,
    createCompany,
    upgradeCompany,
    buyShares,
    sellShares,
    buyRealShares,
    sellRealShares,
    formatCurrency,
    formatPlayTime,
    getCreditScoreLabel,
    manualSave,
    loadSave,
    getSaveSlots,
    deleteSave,
    exportSave,
    importSave,
    newGame,
    takeLoan,
    repayLoan,
    startBoxOfficeProject,
    updateAutoBoxOfficeSettings
  } = useGameState();

  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [isRealCompaniesModalOpen, setIsRealCompaniesModalOpen] = useState(false);
  const [isSaveManagerOpen, setIsSaveManagerOpen] = useState(false);
  const [isLoanManagerOpen, setIsLoanManagerOpen] = useState(false);
  const [isBoxOfficeManagerOpen, setIsBoxOfficeManagerOpen] = useState(false);
  const [isAutoSettingsOpen, setIsAutoSettingsOpen] = useState(false);

  const totalIncome = useMemo(() => {
    const companiesIncome = gameState.companies.reduce((total, company) => {
      return total + (company.currentIncome * company.sharesOwned / 100);
    }, 0);
    
    const realCompaniesIncome = gameState.realCompanies.reduce((total, company) => {
      return total + (company.currentIncome * company.sharesOwned / 100);
    }, 0);
    
    return companiesIncome + realCompaniesIncome;
  }, [gameState.companies, gameState.realCompanies]);

  const ownedRealCompanies = useMemo(() => {
    return gameState.realCompanies.filter(company => company.sharesOwned > 0);
  }, [gameState.realCompanies]);

  const realCompaniesPortfolioValue = useMemo(() => {
    return gameState.realCompanies.reduce((total, company) => 
      total + (company.marketValue * company.sharesOwned / 100), 0
    );
  }, [gameState.realCompanies]);

  const filmCompanies = useMemo(() => {
    return gameState.companies.filter(company => company.industry === 'Film & TV Production');
  }, [gameState.companies]);

  const activeLoans = useMemo(() => {
    return gameState.loans.filter(loan => loan.status === 'active');
  }, [gameState.loans]);

  const totalDebt = useMemo(() => {
    return activeLoans.reduce((sum, loan) => sum + loan.amount, 0);
  }, [activeLoans]);

  const activeProjects = useMemo(() => {
    return gameState.boxOfficeProjects.filter(project => project.status === 'in-production');
  }, [gameState.boxOfficeProjects]);

  const autoGeneratedProjects = useMemo(() => {
    return gameState.boxOfficeProjects.filter(project => project.isAutoGenerated);
  }, [gameState.boxOfficeProjects]);

  const saveSlots = useMemo(() => getSaveSlots(), [getSaveSlots]);

  const toggleAutoBoxOffice = () => {
    updateAutoBoxOfficeSettings({ 
      enabled: !gameState.autoBoxOfficeSettings.enabled 
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 relative overflow-hidden">
      {/* Animated Background Elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <motion.div
          className="absolute top-20 left-20 w-96 h-96 bg-gradient-to-br from-blue-200/30 to-purple-200/30 rounded-full blur-3xl"
          animate={{
            x: [0, 50, 0],
            y: [0, -30, 0],
            scale: [1, 1.1, 1],
          }}
          transition={{ duration: 20, repeat: Infinity, ease: "easeInOut" }}
        />
        <motion.div
          className="absolute bottom-20 right-20 w-80 h-80 bg-gradient-to-br from-pink-200/30 to-yellow-200/30 rounded-full blur-3xl"
          animate={{
            x: [0, -40, 0],
            y: [0, 40, 0],
            scale: [1, 0.9, 1],
          }}
          transition={{ duration: 25, repeat: Infinity, ease: "easeInOut" }}
        />
      </div>

      {/* Stats Header */}
      <StatsHeader
        cash={gameState.cash}
        totalNetWorth={gameState.totalNetWorth}
        totalIncome={totalIncome}
        formatCurrency={formatCurrency}
        saveStatus={saveStatus}
        onOpenSaveManager={() => setIsSaveManagerOpen(true)}
      />

      {/* Main Content */}
      <div className="pt-24 sm:pt-28 pb-8 px-4 sm:px-6 lg:px-8 max-w-7xl mx-auto">
        {gameState.companies.length === 0 && ownedRealCompanies.length === 0 ? (
          /* Welcome Screen */
          <motion.div
            className="text-center py-12 sm:py-16"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
          >
            <motion.div
              className="text-5xl sm:text-6xl mb-6"
              animate={{ rotate: [0, 10, -10, 0] }}
              transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
            >
              ðŸš€
            </motion.div>
            <h1 className="text-3xl sm:text-4xl lg:text-5xl font-bold text-gray-900 mb-6 px-4">
              Welcome to Entrepreneur Empire
            </h1>
            <p className="text-lg sm:text-xl text-gray-600 mb-10 max-w-3xl mx-auto px-4 leading-relaxed">
              Start your business journey by creating your own company or investing in real companies. 
              Use loans to accelerate growth and enable auto box office to let your film studios run themselves!
            </p>
            <div className="flex flex-col sm:flex-row gap-6 justify-center items-center max-w-3xl mx-auto">
              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }} className="w-full sm:w-auto">
                <Button
                  onClick={() => setIsCreateModalOpen(true)}
                  size="lg"
                  className="w-full sm:w-auto bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white shadow-xl px-8 py-4 text-lg"
                >
                  <Plus className="w-5 h-5 mr-3 flex-shrink-0" />
                  Start Your First Company
                </Button>
              </motion.div>
              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }} className="w-full sm:w-auto">
                <Button
                  onClick={() => setIsRealCompaniesModalOpen(true)}
                  size="lg"
                  variant="outline"
                  className="w-full sm:w-auto bg-gradient-to-r from-green-500/10 to-yellow-500/10 border-green-500/30 hover:from-green-500/20 hover:to-yellow-500/20 text-gray-900 shadow-xl px-8 py-4 text-lg backdrop-blur-sm"
                >
                  <Star className="w-5 h-5 mr-3 flex-shrink-0 text-yellow-500" />
                  Invest in Real Companies
                </Button>
              </motion.div>
              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }} className="w-full sm:w-auto">
                <Button
                  onClick={() => setIsLoanManagerOpen(true)}
                  size="lg"
                  variant="outline"
                  className="w-full sm:w-auto bg-gradient-to-r from-red-500/10 to-pink-500/10 border-red-500/30 hover:from-red-500/20 hover:to-pink-500/20 text-gray-900 shadow-xl px-8 py-4 text-lg backdrop-blur-sm"
                >
                  <CreditCard className="w-5 h-5 mr-3 flex-shrink-0 text-red-500" />
                  Get Business Loan
                </Button>
              </motion.div>
            </div>

            {/* Credit Score & Play Time Display */}
            <div className="mt-8 text-center space-y-2">
              <div className="text-sm text-gray-500">
                Play Time: {formatPlayTime(gameState.playTime)}
              </div>
              <div className="flex items-center justify-center space-x-4 text-sm">
                <div className="flex items-center space-x-2">
                  <span className="text-gray-500">Credit Score:</span>
                  <span className={`font-medium ${
                    gameState.creditScore >= 700 ? 'text-green-600' : 
                    gameState.creditScore >= 600 ? 'text-yellow-600' : 'text-red-600'
                  }`}>
                    {gameState.creditScore} ({getCreditScoreLabel(gameState.creditScore)})
                  </span>
                </div>
              </div>
            </div>
          </motion.div>
        ) : (
          /* Companies Dashboard */
          <div className="space-y-10">
            {/* Action Bar */}
            <div className="flex flex-col sm:flex-row gap-6 justify-between items-start sm:items-center">
              <div>
                <h1 className="text-3xl sm:text-4xl font-bold text-gray-900 mb-2">Your Business Empire</h1>
                <div className="flex items-center space-x-4 text-sm text-gray-600">
                  <span>Play Time: {formatPlayTime(gameState.playTime)}</span>
                  <span>â€¢</span>
                  <span>Companies: {gameState.companies.length + ownedRealCompanies.length}</span>
                  <span>â€¢</span>
                  <div className="flex items-center space-x-1">
                    <span>Credit:</span>
                    <span className={`font-medium ${
                      gameState.creditScore >= 700 ? 'text-green-600' : 
                      gameState.creditScore >= 600 ? 'text-yellow-600' : 'text-red-600'
                    }`}>
                      {gameState.creditScore}
                    </span>
                  </div>
                </div>
              </div>
              <div className="flex flex-col sm:flex-row gap-3 w-full sm:w-auto">
                <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                  <Button
                    onClick={() => setIsCreateModalOpen(true)}
                    className="w-full sm:w-auto bg-gradient-to-r from-green-500 to-blue-600 hover:from-green-600 hover:to-blue-700 text-white shadow-lg text-base px-6 py-3"
                  >
                    <Plus className="w-4 h-4 mr-2 flex-shrink-0" />
                    New Company
                  </Button>
                </motion.div>
                <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                  <Button
                    onClick={() => setIsRealCompaniesModalOpen(true)}
                    variant="outline"
                    className="w-full sm:w-auto bg-gradient-to-r from-yellow-500/10 to-orange-500/10 border-yellow-500/30 hover:from-yellow-500/20 hover:to-orange-500/20 text-gray-900 shadow-lg text-base backdrop-blur-sm px-6 py-3"
                  >
                    <Building className="w-4 h-4 mr-2 flex-shrink-0" />
                    <Star className="w-3 h-3 mr-2 text-yellow-500" />
                    Real Companies
                  </Button>
                </motion.div>
                <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                  <Button
                    onClick={() => setIsLoanManagerOpen(true)}
                    variant="outline"
                    className="w-full sm:w-auto bg-gradient-to-r from-red-500/10 to-pink-500/10 border-red-500/30 hover:from-red-500/20 hover:to-pink-500/20 text-gray-900 shadow-lg text-base backdrop-blur-sm px-6 py-3"
                  >
                    <CreditCard className="w-4 h-4 mr-2 flex-shrink-0" />
                    {activeLoans.length > 0 ? (
                      <>
                        Loans ({activeLoans.length})
                        {totalDebt > 0 && <AlertCircle className="w-3 h-3 ml-1 text-red-500" />}
                      </>
                    ) : (
                      'Get Loan'
                    )}
                  </Button>
                </motion.div>
                {filmCompanies.length > 0 && (
                  <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                    <Button
                      onClick={() => setIsBoxOfficeManagerOpen(true)}
                      variant="outline"
                      className="w-full sm:w-auto bg-gradient-to-r from-purple-500/10 to-pink-500/10 border-purple-500/30 hover:from-purple-500/20 hover:to-pink-500/20 text-gray-900 shadow-lg text-base backdrop-blur-sm px-6 py-3"
                    >
                      <Film className="w-4 h-4 mr-2 flex-shrink-0" />
                      Box Office
                    </Button>
                  </motion.div>
                )}
              </div>
            </div>

            {/* Auto Box Office Status */}
            {filmCompanies.length > 0 && (
              <motion.div
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                className={`backdrop-blur-xl rounded-xl p-4 border ${
                  gameState.autoBoxOfficeSettings.enabled
                    ? 'bg-gradient-to-r from-green-500/10 to-blue-500/10 border-green-500/20'
                    : 'bg-gradient-to-r from-gray-500/10 to-gray-500/10 border-gray-500/20'
                }`}
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    {gameState.autoBoxOfficeSettings.enabled ? (
                      <Zap className="w-5 h-5 text-green-600" />
                    ) : (
                      <Pause className="w-5 h-5 text-gray-600" />
                    )}
                    <div>
                      <div className="font-semibold text-gray-900 flex items-center space-x-2">
                        <span>Auto Box Office</span>
                        <Badge className={gameState.autoBoxOfficeSettings.enabled ? 'bg-green-500' : 'bg-gray-500'}>
                          {gameState.autoBoxOfficeSettings.enabled ? 'Active' : 'Paused'}
                        </Badge>
                      </div>
                      <div className="text-sm text-gray-600">
                        {gameState.autoBoxOfficeSettings.enabled ? (
                          <>
                            {activeProjects.length} projects in production â€¢ {autoGeneratedProjects.length} auto-generated â€¢ 
                            Strategy: {gameState.autoBoxOfficeSettings.aggressiveness}
                          </>
                        ) : (
                          'Automatic project creation is disabled'
                        )}
                      </div>
                    </div>
                  </div>
                  <div className="flex space-x-2">
                    <Button
                      onClick={toggleAutoBoxOffice}
                      size="sm"
                      variant={gameState.autoBoxOfficeSettings.enabled ? 'default' : 'outline'}
                      className={gameState.autoBoxOfficeSettings.enabled 
                        ? 'bg-red-500 hover:bg-red-600 text-white' 
                        : 'bg-green-500 hover:bg-green-600 text-white'
                      }
                    >
                      {gameState.autoBoxOfficeSettings.enabled ? (
                        <>
                          <Pause className="w-4 h-4 mr-2" />
                          Pause
                        </>
                      ) : (
                        <>
                          <Play className="w-4 h-4 mr-2" />
                          Start
                        </>
                      )}
                    </Button>
                    <Button
                      onClick={() => setIsAutoSettingsOpen(true)}
                      size="sm"
                      variant="outline"
                      className="bg-white/20 border-white/30 hover:bg-white/30"
                    >
                      <Settings className="w-4 h-4 mr-2" />
                      Settings
                    </Button>
                  </div>
                </div>
              </motion.div>
            )}

            {/* Debt Alert */}
            {totalDebt > 0 && (
              <motion.div
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                className="bg-gradient-to-r from-red-500/10 to-orange-500/10 backdrop-blur-xl rounded-xl p-4 border border-red-500/20"
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <AlertCircle className="w-5 h-5 text-red-600" />
                    <div>
                      <div className="font-semibold text-gray-900">Active Debt</div>
                      <div className="text-sm text-gray-600">
                        {activeLoans.length} active loans â€¢ Total debt: {formatCurrency(totalDebt)}
                      </div>
                    </div>
                  </div>
                  <Button
                    onClick={() => setIsLoanManagerOpen(true)}
                    size="sm"
                    className="bg-red-500 hover:bg-red-600 text-white"
                  >
                    Manage Loans
                  </Button>
                </div>
              </motion.div>
            )}

            {/* Real Companies Portfolio Summary */}
            {ownedRealCompanies.length > 0 && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="bg-gradient-to-r from-white/15 to-white/5 backdrop-blur-xl rounded-3xl border border-white/30 shadow-2xl p-8"
              >
                <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-8 gap-4">
                  <div className="flex items-center space-x-4">
                    <Star className="w-8 h-8 text-yellow-500" />
                    <div>
                      <h2 className="text-2xl font-semibold text-gray-900">Real Companies Portfolio</h2>
                      <Badge className="mt-2 bg-gradient-to-r from-yellow-500 to-orange-500 text-white text-sm">
                        {ownedRealCompanies.length} Companies
                      </Badge>
                    </div>
                  </div>
                  <Button
                    onClick={() => setIsRealCompaniesModalOpen(true)}
                    variant="ghost"
                    className="hover:bg-white/20 px-4 py-2"
                  >
                    <TrendingUp className="w-4 h-4 mr-2" />
                    Manage Portfolio
                  </Button>
                </div>
                
                <div className="grid grid-cols-2 lg:grid-cols-4 gap-6">
                  <div className="text-center space-y-2">
                    <div className="text-sm text-gray-600 font-medium">Portfolio Value</div>
                    <div className="text-xl font-semibold text-gray-900 break-words">
                      {formatCurrency(realCompaniesPortfolioValue)}
                    </div>
                  </div>
                  <div className="text-center space-y-2">
                    <div className="text-sm text-gray-600 font-medium">Daily Income</div>
                    <div className="text-xl font-semibold text-green-600 break-words">
                      +{formatCurrency(gameState.realCompanies.reduce((total, company) => 
                        total + (company.currentIncome * company.sharesOwned / 100 * 86400), 0
                      ))}
                    </div>
                  </div>
                  <div className="text-center space-y-2">
                    <div className="text-sm text-gray-600 font-medium">Best Performer</div>
                    <div className="text-base font-semibold text-gray-900 break-words">
                      {ownedRealCompanies.reduce((best, company) => 
                        company.sharesOwned > best.sharesOwned ? company : best, ownedRealCompanies[0]
                      )?.name || 'N/A'}
                    </div>
                  </div>
                  <div className="text-center space-y-2">
                    <div className="text-sm text-gray-600 font-medium">Total Owned</div>
                    <div className="text-xl font-semibold text-gray-900">
                      {ownedRealCompanies.reduce((total, company) => total + company.sharesOwned, 0).toFixed(1)}%
                    </div>
                  </div>
                </div>
              </motion.div>
            )}

            {/* Your Companies Section */}
            {gameState.companies.length > 0 && (
              <div className="space-y-8">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <Briefcase className="w-8 h-8 text-gray-700 flex-shrink-0" />
                    <div className="flex items-center space-x-3 min-w-0">
                      <h2 className="text-2xl font-semibold text-gray-900">Your Companies</h2>
                      <Badge variant="secondary" className="text-base px-3 py-1">
                        {gameState.companies.length}
                      </Badge>
                    </div>
                  </div>
                  {filmCompanies.length > 0 && (
                    <div className="flex items-center space-x-3">
                      <Button
                        onClick={() => setIsBoxOfficeManagerOpen(true)}
                        variant="ghost"
                        className="hover:bg-white/20 px-4 py-2"
                      >
                        <Film className="w-4 h-4 mr-2" />
                        Box Office ({gameState.boxOfficeProjects.length})
                      </Button>
                      {gameState.autoBoxOfficeSettings.enabled && (
                        <Badge className="bg-blue-500 text-white">
                          <Zap className="w-3 h-3 mr-1" />
                          Auto-Producing
                        </Badge>
                      )}
                    </div>
                  )}
                </div>

                <motion.div
                  className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-8"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ duration: 0.5, staggerChildren: 0.1 }}
                >
                  {gameState.companies.map((company) => (
                    <CompanyCard
                      key={company.id}
                      company={company}
                      onUpgrade={upgradeCompany}
                      onBuyShares={buyShares}
                      onSellShares={sellShares}
                      formatCurrency={formatCurrency}
                      canAffordUpgrade={gameState.cash >= company.upgradeCost}
                    />
                  ))}
                </motion.div>
              </div>
            )}
          </div>
        )}
      </div>

      {/* Modals */}
      <CreateCompanyModal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        industries={industries}
        onCreateCompany={createCompany}
        formatCurrency={formatCurrency}
        currentCash={gameState.cash}
      />

      <RealCompaniesModal
        isOpen={isRealCompaniesModalOpen}
        onClose={() => setIsRealCompaniesModalOpen(false)}
        realCompanies={gameState.realCompanies}
        onBuyShares={buyRealShares}
        onSellShares={sellRealShares}
        formatCurrency={formatCurrency}
        currentCash={gameState.cash}
      />

      <SaveManager
        isOpen={isSaveManagerOpen}
        onClose={() => setIsSaveManagerOpen(false)}
        saveStatus={saveStatus}
        currentSaveSlot={currentSaveSlot}
        saveSlots={saveSlots}
        onManualSave={manualSave}
        onLoadSave={loadSave}
        onDeleteSave={deleteSave}
        onExportSave={exportSave}
        onImportSave={importSave}
        onNewGame={newGame}
        formatCurrency={formatCurrency}
        formatPlayTime={formatPlayTime}
      />

      <LoanManager
        isOpen={isLoanManagerOpen}
        onClose={() => setIsLoanManagerOpen(false)}
        loans={gameState.loans}
        loanOffers={loanOffers}
        creditScore={gameState.creditScore}
        currentCash={gameState.cash}
        onTakeLoan={takeLoan}
        onRepayLoan={repayLoan}
        formatCurrency={formatCurrency}
        getCreditScoreLabel={getCreditScoreLabel}
      />

      <BoxOfficeManager
        isOpen={isBoxOfficeManagerOpen}
        onClose={() => setIsBoxOfficeManagerOpen(false)}
        filmCompanies={filmCompanies}
        boxOfficeProjects={gameState.boxOfficeProjects}
        currentCash={gameState.cash}
        onStartProject={startBoxOfficeProject}
        formatCurrency={formatCurrency}
      />

      <AutoBoxOfficeSettings
        isOpen={isAutoSettingsOpen}
        onClose={() => setIsAutoSettingsOpen(false)}
        settings={gameState.autoBoxOfficeSettings}
        onUpdateSettings={updateAutoBoxOfficeSettings}
        formatCurrency={formatCurrency}
        currentCash={gameState.cash}
      />
    </div>
  );
}